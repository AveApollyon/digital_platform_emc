# Generated by Django 5.1.7 on 2025-05-06 11:29

import django.db.models.deletion
import entities.validators
import simple_history.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Symptom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=20, validators=[entities.validators.validate_russian_name], verbose_name='Имя')),
                ('last_name', models.CharField(max_length=40, validators=[entities.validators.validate_russian_name], verbose_name='Фамилия')),
                ('middle_name', models.CharField(max_length=40, validators=[entities.validators.validate_russian_name], verbose_name='Отчество')),
                ('date_of_birth', models.DateField(validators=[entities.validators.validate_date_of_birth], verbose_name='Дата рождения')),
                ('phone_number', models.CharField(max_length=12, validators=[entities.validators.validate_phone_number], verbose_name='Номер телефона')),
                ('email', models.CharField(max_length=50, validators=[entities.validators.validate_email], verbose_name='Электронная почта')),
                ('gender', models.CharField(choices=[('Ж', 'Женский'), ('М', 'Мужской')], default='М', max_length=1, verbose_name='Пол')),
                ('specialty', models.CharField(choices=[('ХИР', 'Хирург'), ('ТЕР', 'Терапевт'), ('НЕВ', 'Невролог'), ('ДЕР', 'Дерматолог'), ('ОКУ', 'Окулист')], default='TER', max_length=3, verbose_name='Специальность')),
                ('user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalDoctor',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('first_name', models.CharField(max_length=20, validators=[entities.validators.validate_russian_name], verbose_name='Имя')),
                ('last_name', models.CharField(max_length=40, validators=[entities.validators.validate_russian_name], verbose_name='Фамилия')),
                ('middle_name', models.CharField(max_length=40, validators=[entities.validators.validate_russian_name], verbose_name='Отчество')),
                ('date_of_birth', models.DateField(validators=[entities.validators.validate_date_of_birth], verbose_name='Дата рождения')),
                ('phone_number', models.CharField(max_length=12, validators=[entities.validators.validate_phone_number], verbose_name='Номер телефона')),
                ('email', models.CharField(max_length=50, validators=[entities.validators.validate_email], verbose_name='Электронная почта')),
                ('gender', models.CharField(choices=[('Ж', 'Женский'), ('М', 'Мужской')], default='М', max_length=1, verbose_name='Пол')),
                ('specialty', models.CharField(choices=[('ХИР', 'Хирург'), ('ТЕР', 'Терапевт'), ('НЕВ', 'Невролог'), ('ДЕР', 'Дерматолог'), ('ОКУ', 'Окулист')], default='TER', max_length=3, verbose_name='Специальность')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical doctor',
                'verbose_name_plural': 'historical doctors',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPatient',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('first_name', models.CharField(max_length=20, validators=[entities.validators.validate_russian_name], verbose_name='Имя')),
                ('last_name', models.CharField(max_length=40, validators=[entities.validators.validate_russian_name], verbose_name='Фамилия')),
                ('middle_name', models.CharField(max_length=40, validators=[entities.validators.validate_russian_name], verbose_name='Отчество')),
                ('date_of_birth', models.DateField(validators=[entities.validators.validate_date_of_birth], verbose_name='Дата рождения')),
                ('phone_number', models.CharField(max_length=12, validators=[entities.validators.validate_phone_number], verbose_name='Номер телефона')),
                ('email', models.CharField(max_length=50, validators=[entities.validators.validate_email], verbose_name='Электронная почта')),
                ('gender', models.CharField(choices=[('Ж', 'Женский'), ('М', 'Мужской')], default='М', max_length=1, verbose_name='Пол')),
                ('snils', models.CharField(blank=True, max_length=11, null=True, validators=[entities.validators.validate_snils], verbose_name='СНИЛС пациента')),
                ('inn', models.CharField(blank=True, max_length=12, null=True, validators=[entities.validators.validate_inn], verbose_name='ИНН пациента')),
                ('place_of_birth', models.CharField(blank=True, max_length=100, null=True, validators=[entities.validators.validate_russian_text], verbose_name='Место рождения')),
                ('id_document_type', models.CharField(blank=True, max_length=50, null=True, validators=[entities.validators.validate_russian_text], verbose_name='Документ, удостоверяющий личность пациента')),
                ('id_document_series_and_number', models.CharField(blank=True, max_length=20, null=True, validators=[entities.validators.validate_document_series_and_number], verbose_name='Серия и номер документа')),
                ('id_document_issued_by', models.CharField(blank=True, max_length=100, null=True, validators=[entities.validators.validate_russian_text], verbose_name='Кем выдан документ')),
                ('id_document_issue_date', models.DateField(blank=True, null=True, validators=[entities.validators.validate_issue_date], verbose_name='Дата выдачи документа')),
                ('race', models.CharField(blank=True, max_length=50, null=True, validators=[entities.validators.validate_russian_text], verbose_name='Расовая принадлежность')),
                ('marital_status', models.CharField(blank=True, max_length=50, null=True, validators=[entities.validators.validate_russian_text], verbose_name='Семейное положение')),
                ('number_of_children', models.IntegerField(blank=True, null=True, validators=[entities.validators.validate_number_of_children], verbose_name='Количество детей')),
                ('education_level', models.CharField(blank=True, max_length=50, null=True, validators=[entities.validators.validate_russian_text], verbose_name='Уровень образования')),
                ('workplace', models.CharField(blank=True, max_length=100, null=True, validators=[entities.validators.validate_russian_text], verbose_name='Место работы')),
                ('position', models.CharField(blank=True, max_length=100, null=True, validators=[entities.validators.validate_russian_text], verbose_name='Должность')),
                ('job_type', models.CharField(blank=True, max_length=50, null=True, validators=[entities.validators.validate_russian_text], verbose_name='Характер труда')),
                ('social_professional_group', models.CharField(blank=True, max_length=50, null=True, validators=[entities.validators.validate_russian_text], verbose_name='Социально-профессиональная группа пациента')),
                ('insurance_company', models.CharField(blank=True, max_length=100, null=True, validators=[entities.validators.validate_russian_text], verbose_name='Страховая компания')),
                ('oms_policy_type', models.CharField(blank=True, max_length=50, null=True, validators=[entities.validators.validate_russian_text], verbose_name='Тип полиса ОМС')),
                ('oms_policy_series', models.CharField(blank=True, max_length=10, null=True, validators=[entities.validators.validate_oms_policy_series], verbose_name='Серия полиса ОМС')),
                ('oms_policy_number', models.CharField(blank=True, max_length=20, null=True, validators=[entities.validators.validate_oms_policy_number], verbose_name='Номер полиса ОМС')),
                ('oms_policy_issue_date', models.DateField(blank=True, null=True, validators=[entities.validators.validate_issue_date], verbose_name='Дата выдачи ОМС')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical patient',
                'verbose_name_plural': 'historical patients',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=20, validators=[entities.validators.validate_russian_name], verbose_name='Имя')),
                ('last_name', models.CharField(max_length=40, validators=[entities.validators.validate_russian_name], verbose_name='Фамилия')),
                ('middle_name', models.CharField(max_length=40, validators=[entities.validators.validate_russian_name], verbose_name='Отчество')),
                ('date_of_birth', models.DateField(validators=[entities.validators.validate_date_of_birth], verbose_name='Дата рождения')),
                ('phone_number', models.CharField(max_length=12, validators=[entities.validators.validate_phone_number], verbose_name='Номер телефона')),
                ('email', models.CharField(max_length=50, validators=[entities.validators.validate_email], verbose_name='Электронная почта')),
                ('gender', models.CharField(choices=[('Ж', 'Женский'), ('М', 'Мужской')], default='М', max_length=1, verbose_name='Пол')),
                ('snils', models.CharField(blank=True, max_length=11, null=True, validators=[entities.validators.validate_snils], verbose_name='СНИЛС пациента')),
                ('inn', models.CharField(blank=True, max_length=12, null=True, validators=[entities.validators.validate_inn], verbose_name='ИНН пациента')),
                ('place_of_birth', models.CharField(blank=True, max_length=100, null=True, validators=[entities.validators.validate_russian_text], verbose_name='Место рождения')),
                ('id_document_type', models.CharField(blank=True, max_length=50, null=True, validators=[entities.validators.validate_russian_text], verbose_name='Документ, удостоверяющий личность пациента')),
                ('id_document_series_and_number', models.CharField(blank=True, max_length=20, null=True, validators=[entities.validators.validate_document_series_and_number], verbose_name='Серия и номер документа')),
                ('id_document_issued_by', models.CharField(blank=True, max_length=100, null=True, validators=[entities.validators.validate_russian_text], verbose_name='Кем выдан документ')),
                ('id_document_issue_date', models.DateField(blank=True, null=True, validators=[entities.validators.validate_issue_date], verbose_name='Дата выдачи документа')),
                ('race', models.CharField(blank=True, max_length=50, null=True, validators=[entities.validators.validate_russian_text], verbose_name='Расовая принадлежность')),
                ('marital_status', models.CharField(blank=True, max_length=50, null=True, validators=[entities.validators.validate_russian_text], verbose_name='Семейное положение')),
                ('number_of_children', models.IntegerField(blank=True, null=True, validators=[entities.validators.validate_number_of_children], verbose_name='Количество детей')),
                ('education_level', models.CharField(blank=True, max_length=50, null=True, validators=[entities.validators.validate_russian_text], verbose_name='Уровень образования')),
                ('workplace', models.CharField(blank=True, max_length=100, null=True, validators=[entities.validators.validate_russian_text], verbose_name='Место работы')),
                ('position', models.CharField(blank=True, max_length=100, null=True, validators=[entities.validators.validate_russian_text], verbose_name='Должность')),
                ('job_type', models.CharField(blank=True, max_length=50, null=True, validators=[entities.validators.validate_russian_text], verbose_name='Характер труда')),
                ('social_professional_group', models.CharField(blank=True, max_length=50, null=True, validators=[entities.validators.validate_russian_text], verbose_name='Социально-профессиональная группа пациента')),
                ('insurance_company', models.CharField(blank=True, max_length=100, null=True, validators=[entities.validators.validate_russian_text], verbose_name='Страховая компания')),
                ('oms_policy_type', models.CharField(blank=True, max_length=50, null=True, validators=[entities.validators.validate_russian_text], verbose_name='Тип полиса ОМС')),
                ('oms_policy_series', models.CharField(blank=True, max_length=10, null=True, validators=[entities.validators.validate_oms_policy_series], verbose_name='Серия полиса ОМС')),
                ('oms_policy_number', models.CharField(blank=True, max_length=20, null=True, validators=[entities.validators.validate_oms_policy_number], verbose_name='Номер полиса ОМС')),
                ('oms_policy_issue_date', models.DateField(blank=True, null=True, validators=[entities.validators.validate_issue_date], verbose_name='Дата выдачи ОМС')),
                ('user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalVisit',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('examination', models.TextField(validators=[entities.validators.validate_examination], verbose_name='Физический осмотр')),
                ('diagnosis', models.TextField(blank=True, verbose_name='Диагнозы')),
                ('consultation', models.BooleanField(default=True, verbose_name='Консультация?')),
                ('visit_date', models.DateTimeField(validators=[entities.validators.validate_date_time_of_visit], verbose_name='Дата посещения')),
                ('prescriptions', models.TextField(validators=[entities.validators.validate_prescriptions], verbose_name='Рецепт')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('doctor', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='entities.doctor', verbose_name='Врач')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='entities.patient', verbose_name='Пациент')),
            ],
            options={
                'verbose_name': 'historical visit',
                'verbose_name_plural': 'historical visits',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalMedicalCard',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='entities.patient', verbose_name='Пациент')),
            ],
            options={
                'verbose_name': 'historical medical card',
                'verbose_name_plural': 'historical medical cards',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Analysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_name', models.CharField(max_length=200)),
                ('result', models.TextField()),
                ('date', models.DateField()),
                ('status', models.CharField(choices=[('in_progress', 'В процессе'), ('completed', 'Завершено'), ('pending', 'Ожидает')], default='in_progress', max_length=20)),
                ('analysis_file', models.FileField(blank=True, null=True, upload_to='analyses/')),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analyses', to='entities.doctor')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analyses', to='entities.patient')),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='Visit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('examination', models.TextField(validators=[entities.validators.validate_examination], verbose_name='Физический осмотр')),
                ('diagnosis', models.TextField(blank=True, verbose_name='Диагнозы')),
                ('consultation', models.BooleanField(default=True, verbose_name='Консультация?')),
                ('visit_date', models.DateTimeField(validators=[entities.validators.validate_date_time_of_visit], verbose_name='Дата посещения')),
                ('prescriptions', models.TextField(validators=[entities.validators.validate_prescriptions], verbose_name='Рецепт')),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.doctor', verbose_name='Врач')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.patient', verbose_name='Пациент')),
                ('symptoms', models.ManyToManyField(blank=True, related_name='visits', to='entities.symptom')),
            ],
        ),
        migrations.CreateModel(
            name='MedicalCard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.patient', verbose_name='Пациент')),
                ('visits', models.ManyToManyField(to='entities.visit', verbose_name='Посещения')),
            ],
        ),
    ]
